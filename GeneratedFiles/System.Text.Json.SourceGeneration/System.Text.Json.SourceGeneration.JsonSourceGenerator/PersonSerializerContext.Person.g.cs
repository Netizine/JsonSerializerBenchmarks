// <auto-generated/>
#nullable enable

namespace JsonSerializerBenchmarks
{
    public partial class PersonSerializerContext
    {
        private global::System.Text.Json.Serialization.Metadata.JsonTypeInfo<global::JsonSerializerBenchmarks.Person>? _Person;
        public global::System.Text.Json.Serialization.Metadata.JsonTypeInfo<global::JsonSerializerBenchmarks.Person> Person
        {
            get
            {
                if (_Person == null)
                {
                    global::System.Text.Json.Serialization.JsonConverter? customConverter;
                    if (Options.Converters.Count > 0 && (customConverter = GetRuntimeProvidedCustomConverter(typeof(global::JsonSerializerBenchmarks.Person))) != null)
                    {
                        _Person = global::System.Text.Json.Serialization.Metadata.JsonMetadataServices.CreateValueInfo<global::JsonSerializerBenchmarks.Person>(Options, customConverter);
                    }
                    else
                    {
                        global::System.Text.Json.Serialization.Metadata.JsonObjectInfoValues<global::JsonSerializerBenchmarks.Person> objectInfo = new global::System.Text.Json.Serialization.Metadata.JsonObjectInfoValues<global::JsonSerializerBenchmarks.Person>()
                        {
                            ObjectCreator = static () => new global::JsonSerializerBenchmarks.Person(),
                            ObjectWithParameterizedConstructorCreator = null,
                            PropertyMetadataInitializer = PersonPropInit,
                            ConstructorParameterMetadataInitializer = null,
                            NumberHandling = default,
                            SerializeHandler = PersonSerializeHandler
                        };
            
                        _Person = global::System.Text.Json.Serialization.Metadata.JsonMetadataServices.CreateObjectInfo<global::JsonSerializerBenchmarks.Person>(Options, objectInfo);
                    }
                }
        
                return _Person;
            }
        }
        
        private static global::System.Text.Json.Serialization.Metadata.JsonPropertyInfo[] PersonPropInit(global::System.Text.Json.Serialization.JsonSerializerContext context)
        {
            global::JsonSerializerBenchmarks.PersonSerializerContext jsonContext = (global::JsonSerializerBenchmarks.PersonSerializerContext)context;
            global::System.Text.Json.JsonSerializerOptions options = context.Options;
        
            global::System.Text.Json.Serialization.Metadata.JsonPropertyInfo[] properties = new global::System.Text.Json.Serialization.Metadata.JsonPropertyInfo[2];
        
            global::System.Text.Json.Serialization.Metadata.JsonPropertyInfoValues<global::System.String> info0 = new global::System.Text.Json.Serialization.Metadata.JsonPropertyInfoValues<global::System.String>()
            {
                IsProperty = true,
                IsPublic = true,
                IsVirtual = false,
                DeclaringType = typeof(global::JsonSerializerBenchmarks.Person),
                PropertyTypeInfo = jsonContext.String,
                Converter = null,
                Getter = static (obj) => ((global::JsonSerializerBenchmarks.Person)obj).FirstName,
                Setter = static (obj, value) => ((global::JsonSerializerBenchmarks.Person)obj).FirstName = value!,
                IgnoreCondition = null,
                HasJsonInclude = false,
                IsExtensionData = false,
                NumberHandling = default,
                PropertyName = "FirstName",
                JsonPropertyName = null
            };
        
            properties[0] = global::System.Text.Json.Serialization.Metadata.JsonMetadataServices.CreatePropertyInfo<global::System.String>(options, info0);
            
            global::System.Text.Json.Serialization.Metadata.JsonPropertyInfoValues<global::System.String> info1 = new global::System.Text.Json.Serialization.Metadata.JsonPropertyInfoValues<global::System.String>()
            {
                IsProperty = true,
                IsPublic = true,
                IsVirtual = false,
                DeclaringType = typeof(global::JsonSerializerBenchmarks.Person),
                PropertyTypeInfo = jsonContext.String,
                Converter = null,
                Getter = static (obj) => ((global::JsonSerializerBenchmarks.Person)obj).LastName,
                Setter = static (obj, value) => ((global::JsonSerializerBenchmarks.Person)obj).LastName = value!,
                IgnoreCondition = null,
                HasJsonInclude = false,
                IsExtensionData = false,
                NumberHandling = default,
                PropertyName = "LastName",
                JsonPropertyName = null
            };
        
            properties[1] = global::System.Text.Json.Serialization.Metadata.JsonMetadataServices.CreatePropertyInfo<global::System.String>(options, info1);
            
            return properties;
        }
        
        private static void PersonSerializeHandler(global::System.Text.Json.Utf8JsonWriter writer, global::JsonSerializerBenchmarks.Person value)
        {
            if (value == null)
            {
                writer.WriteNullValue();
                return;
            }
        
            writer.WriteStartObject();
            writer.WriteString(PropName_firstName, value.FirstName);
            writer.WriteString(PropName_lastName, value.LastName);
        
            writer.WriteEndObject();
        }
    }
}
